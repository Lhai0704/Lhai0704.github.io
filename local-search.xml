<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/01/13/MySQL/"/>
    <url>/2025/01/13/MySQL/</url>
    
    <content type="html"><![CDATA[<p> mysql可以分为客户端和服务端，服务器接收客户端发送的请求，与存储的数据进行交互，然后向客户端响应信息。客户端和服务器都是一个进程，所以它们之间的通信是进程间通信。服务器启动时会默认申请3306端口号，在这个端口号上等待客户端进程进行连接，也就是服务器默认监听3306端口。<br> ![[IMG_629E544D6413-1.jpeg]]</p><p> 连接管理：<br> 每当一个客户端进程连接到服务器进程时，服务器进程都会创建一个线程专门处理与该客户端的交互，当该客户端退出时，服务器不会立即销毁线程，而是会将线程缓存起来，另一个客户端连接时，将缓存的线程分配给新的客户端，避免频繁创建和销毁线程。</p><p> 查询缓存（弃用）：处理过的请求和结果缓存起来，下一次有一样的请求，直接从缓存里找。如果请求文本中有任何不一样，都不会命中缓存。如果请求中包含某些系统函数、用户自定义变量和函数、系统表，则请求不会缓存，例如请求中有now函数，两次调用返回的结果不应该一样。缓存系统会监测缓存涉及的表，如果表有修改，则删除有关的查询缓存。</p><p> 语法解析：判断请求的语法是否正确，算是一个编译过程，涉及词法解析，语法分析，语义分析等阶段。</p><p> 查询优化：语法解析后，服务器获取到了需要的信息，例如要查询的表和列是哪些，搜索条件等。优化程序会对语句进行优化，如外连接转换为内连接、表达式简化、子查询转为连接等等。优化的结果是生成一个执行计划，执行计划表明了应该使用哪些索引执行查询，表之间的连接顺序是啥样等等。可以用explain语句查看语句的执行计划。</p><p> 存储引擎：以前叫做表处理器，功能是接收上层传下来的指令，然后对表中的数据进行读取或写入操作。表是由一行一行的记录组成的，但这是一个逻辑上的概念。存储引擎负责：在物理上如何表示记录，怎么从表中读取数据，怎么把数据写入具体的物理存储器上，等等。处理请求的过程划分为server层和存储引擎层，上面说的从连接管理到查询优化这些不涉及真实数据存取划分为server层的功能。各种不同的存储引擎为server层提供统一的调用接口，包含了几十个底层函数，例如“读取索引第一条记录”，“读取索引下一条记录”等等。server层与存储引擎层交互时，一般是以记录为单位的，（记录就是一条或者说一行数据）。server层在判断某条记录符合要求之后，先将其发送到一个缓冲区，等到该缓冲区满了，才向客户端发送真正的记录，缓冲区大小由系统变量net_buffer_length控制，（缓冲区的作用是减少网络传输的频率和开销）。存储引擎最常用的是InnoDB和MyISAM，偶尔会有MEMORY，不同的存储引擎支持不同的功能。<br> show engines；查看服务器支持的存储引擎。存储引擎是负责对表中的数据进行读取和写入操作的，可以为不同的表设置不同的存储引擎，也就是说，不同的表，可以有不同的物理存储结构，不同的读取写入方式。</p><p>启动选项：mysql –help或mysqld –verbose –help等命令可以查看支持的启动选项，例如，–skip-networking或者–default-storage-engine=MyISAM。<br>命令行中设置的启动选项只对当次启动生效，编写配置文件会方便一些。程序启动时会在多个路径中查找配置文件，例如：/etc/mysql/my.cnf。</p><p>系统变量：查询<code>show variables [like &#39;something&#39;];</code>，like表达式中可以使用通配符来进行模糊查询。<br>系统变量有作用范围之分，分为global和session，也就是全局范围和会话范围。多个客户端可以连接到一个服务器上，客户端之间的系统变量可以是不同的。服务器会为每个连接的客户端维护一组会话变量。设置系统变量的命令：<code>set [global | session] key = value;</code>。用show variables查询时也可以在show后面加上范围。如果客户端修改了global范围的值，不会影响已经连入的客户端，只会影响后续连入的客户端。</p><p>服务器维护了一些状态变量，显示了程序的运行状态，使用<code>show [global|session] status [like &#39;&#39;];</code>来查看。</p><p>字符集：ASCII，128个字符，1个字节。GBK，1-2个字节。UTF-8，1-4个字节。在mysql中utf8是utf8mb3（阉割版，1-3个字节），要存储emoji需要用utf8mb4（1-4个字节存储，默认）。查看字符集：<code>show charset [like &#39;&#39;];</code><br>比较规则：<code>show collation [like &#39;&#39;];</code>，一种字符集可能对应多种比较规则。后缀中ci、ai等表示是否区分重音或大小写。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/01/11/30%E5%A4%A9%E5%88%B6%E4%BD%9CC++%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2025/01/11/30%E5%A4%A9%E5%88%B6%E4%BD%9CC++%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="day01-从一个最简单的socket开始"><a href="#day01-从一个最简单的socket开始" class="headerlink" title="day01-从一个最简单的socket开始"></a>day01-从一个最简单的socket开始</h1><ul><li><a href="https://www.runoob.com/w3cnote/summary-of-network.html">计算机网络基础知识总结</a><br>首先在服务器，我们需要建立一个socket套接字，对外提供一个网络通信接口，在Linux系统中这个套接字竟然仅仅是一个文件描述符，也就是一个<code>int</code>类型的值！这个对套接字的所有操作（包括创建）都是最底层的系统调用。<br>了解什么是Linux系统调用和文件描述符，《现代操作系统》第四版第一章有详细的讨论。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B-%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <url>/2024/12/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B-%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络和因特网"><a href="#计算机网络和因特网" class="headerlink" title="计算机网络和因特网"></a>计算机网络和因特网</h1><p>因特网中，计算设备例如PC、服务器、手机、手表等，称为主机host或端系统end system。端系统通过通信链路communication link和分组交换机packet switch的网络连接到一起。<br>不同的链路以不同的速率传输数据，链路的传输速率以比特每秒bit/s或bps度量。当一台端系统要向另一台端系统发送数据时，发送端系统将数据分段，并为每段加上首部字节。由此形成的信息包用计算机网络的术语来说就是分组packet。<br>分组交换机从一条入通信链路接收到达的分组，并从它的一条出通信链路<font color="#2DC26B">转发</font>该分组。两种常见的分组交换机是路由器router和链路层交换机link-layer switch。链路层网络交换机通常用于接入网中，而路由器通常用于网络核心中。<br>用于传送分组的分组交换网络在许多方面类似于承载运输车辆的运输网络，分组交换机类似于交叉口。<br>端系统通过因特网服务提供商Internet Service Provider ISP接入因特网。<br>IP协议定义了在路由器和端系统之间发送和接收的分组格式。<br>与因特网相连的端系统提供了一个套接字接口socket interface。<br>端系统也称为主机，因为它们容纳（即运行）应用程序，主机=端系统。<br>接入网是指将端系统物理连接到其边缘路由器的网络。家庭接入有几种不同的方式：DSL、电缆、FTTH和5G固定式无线。数字用户线DSL使用现有的电话线。电缆使用现有的有线电视线。FTTH光纤到户，有两种光纤分布体系结构，有源光纤网络AON和无源光纤网络PON。家庭中绝大多数使用的都是PON，PON中，每个家庭都有一个光纤网络端接器ONT，由光纤连接到邻近的分配器（光分路器）splitter，家庭中使用一台路由器与ONT相连。<br>端系统彼此交换报文message。为了从源端系统向目的端系统发送一个报文，源将长报文划分为较小的数据块，称为分组packet。每个分组通过数据链路和分组交换机传送，交换机主要有路由器和链路层交换机两类。<br>如果经过一条链路发送一个L bit的分组，链路的传输速率为R bps，则传输该分组的时间为L/R s。<br>多数分组交换机使用存储转发传输机制，是指转发前必须接收到整个分组。<br>通过N条速率均为R的链路，发送一个分组需要的时间是：<code>N * L / R</code>，发送P个分组的时延是：<code>(N + P - 1) * L / R</code>，解释：1. 什么时候轮到最后一个分组开始发送？<code>(P - 1) * L / R</code>。2. 最后一个发送到目的地需要多少时间？<code>N * L / R</code><br>分组交换机对于每条与其相连的链路，具有一个输出缓存（输出队列），如果到达的分组需要传输到某条链路，但发现该链路正忙于传输其他分组，该分组在输出缓存中等待。因此除了上面说到的存储转发时延，分组还要承受输出缓存的排队时延。如果缓存满了，将会出现分组丢失（丢包）packet loss。<br>每个路由器具有一个转发表forwarding table。端到端选路过程可以用一个不使用地图而喜欢问路的汽车驾驶员来类比。<br>通过网络链路和交换机移动数据有两种基本方法：电路交换和分组交换。电路交换网络中，在端系统间通信会话期间，预留了端系统间沿路径通信所需要的资源（缓存，链路传输速率）。在分组交换网络中，这些资源不是预留的，会话的报文按需使用这些资源，后果可能是等待接入通信线路。传统的电话网络是电路交换网络的一个例子。<br>TODO：网络的网络：P21<br>时延：1. 处理时延：检查分组首部、决定将分组导向何处、检查比特级别的差错等等。2. 排队时延。3. 传输时延：分组长度L / 链路传输速率R。4. 传播时延：路由器之间的距离d / 传播速率s。<br>传输时延和传播时延的区别：传输时延是路由器推出分组所需要的时间，与路由器之间的距离无关。类比高速公路收费站，收费站是路由器，传输时延是收费站处理的时间，传播时延是在公路上行驶的时间。有时还会出现下面的情况：一个分组的前几个比特到达了一台路由器，而该分组中许多余下的比特仍然在前面的路由器中等待传输。<br>时延中最复杂和有趣的是排队时延，排队时延很大程度取决于流量到达该队列的速率、链路的传输速率和到达流量的性质（周期性到达还是突发到达）。假设所有分组由L bit组成，a为分组到达队列的平均速率（单位为分组每秒pkt/s），则La bps为比特到达队列的平均速率，R时传输速率，即从队列中推出比特的速率，单位为bps，那么<code>La / R</code>为流量强度，如果大于1，则表示比特到达的平均速率超过从该队列传输出去的速率，队列会逐渐增长。<br>Traceroute，假设源和目的地之间有N-1台路由器，源发送N个特殊的分组，分组有从1-N的标识，第n台路由器接收到第n个标识对应的分组后，会向源会送一个报文，这样就能重建分组从源到目的地所采用的路由。<br>瞬时吞吐量是主机接收到文件的速率（单位为bps，下载时显示的）。吞吐量取决于数据流过的链路的传输速率。当没有其他干扰流量时，吞吐量能近似为路径中的最小传输速率，但考虑干扰流量时，例如许多其他数据也通过该链路流动，那也可能会形成瓶颈链路。<br>![[IMG_004F48B1DAA9-1.jpeg]]</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/29/Java%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/"/>
    <url>/2024/12/29/Java%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>封装，有时称为信息隐藏。是将数据和行为组合在一个包中，对使用者隐藏具体的实现细节。对象中的数据称为实例字段，操作数据的过程称为方法。实现封装的关键在于，绝对不能让其他类中的方法直接访问这个类的实例字段。程序只能通过对象的方法与对象数据进行交互。<br>OOP的另一个原则是：可以通过扩展其他类来构建新类。这个新类具有被扩展的那个类的全部属性和方法。<br>识别类的一个简单经验是在分析问题的过程中寻找名词，而方法对应动词。<br>对象变量和对象有区别，对象变量并不实际包含一个对象，它只是引用一个对象。所有的Java对象都存储在堆中。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/29/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/12/29/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="基本网络概念"><a href="#基本网络概念" class="headerlink" title="基本网络概念"></a>基本网络概念</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb笔记</title>
    <link href="/2024/12/28/JavaWeb%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/12/28/JavaWeb%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML + CSS"></a>HTML + CSS</h2><p>CSS选择器</p><ul><li><p>元素选择器：标签，例如h1</p></li><li><p>id选择器：给标签指定id属性，用<code>#</code>选择，注：id不会重复</p></li><li><p>类选择器：用class注明类，用<code>.</code>选择</p></li></ul><p>优先级：id选择器 &gt; 类选择器</p><p>盒子模型：由内向外，content，内边距padding，边框border，外边距margin</p><p>div 标签：一行只显示一个，宽度默认是父元素的宽度</p><p>span 标签：一行可以显示多个</p><p>表单form标签：主要负责数据采集功能，例如登录，填写信息等</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>运算符：<code>==</code>会进行类型转换，<code>===</code>不会进行类型转换。</p><p>类型转换：parseInt，将字符串转换为数字，从第一个字符开始转换，一直到非数字字符。转换不了的话返回NaN</p><h3 id="对象："><a href="#对象：" class="headerlink" title="对象："></a>对象：</h3><ol><li><p>基础对象：</p><ol><li><p>Array：定义：new Array() 或 直接[]。数组长度可变，例如一个有三个元素的数组可以给第十个元素赋值，中间的元素为undefined。数组可以存放不同类型的数据。<br> for循环遍历数组中所有元素，forEach遍历有值的元素    </p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>&#125;);<br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>自定义对象    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> 对象名 = &#123;<br>属性名: 属性值;<br>函数名() &#123;&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol></li></ol><ol start="2"><li><p>BOM 浏览器对象模型</p></li><li><p>DOM 文档对象模型</p></li></ol><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>基于MVVM模型（Model - View - ViewModel）实现数据的双向绑定，将编程的关注点放在数据上</p><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>异步的javascript和xml</p><p>通过ajax可以给服务器发送请求，并获取服务器响应的数据</p><p>异步交互：不重新加载整个页面的情况下，与服务器交换数据并更新部分网页。</p><p>axios是对ajax的封装</p><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>用于管理和构建java项目。mac中用brew安装maven，安装目录在/usr/local/Cellar/maven下，里面有配置文件，其中指定了依赖仓库的位置在/.m2目录下，还可以指定镜像仓库。</p><p>Maven坐标由groupId（项目隶属组织，域名反写），artifactId（项目名称或模块名称）和version组成。通过坐标可以唯一定位资源。</p><p>依赖可以传递，如果不想要传递的依赖，就在dependency里面加入exclusions标签来排除依赖。</p><p>可以用scope标签指定依赖的作用范围，四种取值：compile，test，provided，runtime。</p><h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><p>快速构建程序。</p><ul><li><p>接收参数：</p><ul><li><p>简单参数：<br>  直接在形参定义，形参名字要和参数一样，localhost:8080/hello?a=tom&amp;b=1<br>  如果想让形参名字和请求参数不一样，要加入RequestParam注解</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(name=&quot;name&quot;)</span> String a, Integer b)</span> &#123;<br>    System.out.println(a + b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实体参数：</p><p>  简单实体，定义POJO，参数名和对象内的字段名一样</p><p>  如果对象有嵌套的话，用符号“点”</p></li><li><p>数组参数：直接定义一个数组作为形参</p></li><li><p>集合参数：定义同名集合，在前面加上RequestParam注解</p></li><li><p>日期参数：用DateTimeFormat注解来指定日期格式</p></li><li><p>JSON参数：定义POJO接收参数，需要加上RequestBody注解</p></li><li><p>路径参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(&quot;/hi/&#123;name&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">who</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String name)</span> &#123;<br>    System.out.println(name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><p>响应：<br>使用ResponseBody注解，将方法返回值直接响应，如果是对象或者集合，将其转换为JSON后响应。<br>RestController = Controller + ResponseBody</p><p>三层架构：<br>Controller：控制层，接收前端发送的请求，对请求进行处理，并响应数据。<br>Service：业务逻辑层，处理具体业务逻辑<br>dao：数据访问层（持久层），负责数据访问操作</p><p>控制反转IOC：容器来控制对象的创建控制权<br>依赖注入DI：容器为程序提供运行时所依赖的资源<br>bean对象：IOC容器中创建、管理的对象。</p><p>Service层和Dao层的实现类交给IOC容器管理：类上面加上Component注解<br>为Controller层和Service层注入运行时所依赖的对象：变量上面加上AutoWired注解</p><p>要把某个对象交给IOC容器管理，在类上加注解：</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>声明bean的基础注解，不属于以下三类时用此注解</td></tr><tr><td>@Controller</td><td>标注控制器类Controller</td></tr><tr><td>@Service</td><td>标注业务类Service</td></tr><tr><td>@Respository</td><td>标注数据访问类，由于与mybatis整合，用得少</td></tr></tbody></table><p>AutoWired自动装配，默认按照类型，如果有多个相同类型的bean，会报错。解决方法有：加上Primary注解，指定优先级；加上Qualifier注解，手动指定注入哪个bean；加上Resource注解，手动指定bean。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫学习笔记</title>
    <link href="/2024/12/24/%E7%88%AC%E8%99%AB/"/>
    <url>/2024/12/24/%E7%88%AC%E8%99%AB/</url>
    
    <content type="html"><![CDATA[<p>![图片](/img/截屏2024-12-24 20.46.44.png “图片title”)</p><p>scheme：协议，常用的协议有http、https、ftp等，另外scheme也被常称作protocol。<br>某些情况下URL需要提供用户名和密码才能访问。<br>端口：有些URL中没有端口信息，这是使用了默认的端口。http协议的默认端口是80，https协议的默认端口是443。所以<code>https://www.baidu.com</code>其实相当于<code>https://www.baidu.com:443</code>。<br>path：网络资源在服务器中的指定路径。<br>query：用来查询某类资源，多个查询用&amp;隔开。<br>fragment：可以理解为资源内部的书签，目前两个主要的应用：单页面路由，例如Vue、React，另一个应用是HTML锚点，控制页面滚动到特定的位置。</p><p>Https是以安全为目标的Http通道，在http下加入SSL层（secure socket layer）。https的安全基础是SSL，通过该协议传输的内容都是经过SSL加密的。SSL的主要作用有：建立一个信息安全通道，保证数据传输的安全性。确认网站的安全性。<br>在浏览器的地址栏输入一个URL，按下回车之后，浏览器向网站所在的服务器发送一个请求（request），网站服务器接收到请求后对其进行处理和解析，然后返回对应的响应（response），接着传回浏览器。响应里包含页面的源代码等内容。<br>浏览器中Network面板中，一个条目就代表一次发送请求和接收响应等过程。<br>在浏览器中直接输入URL并回车，便发起了一个GET请求，请求的参数会直接包含在URL里。POST请求大多在提交表单时发起，例如登录时。POST请求的数据包含在请求体中。上传文件时，由于文件内容较大，因此也会采用POST方式。<br>请求头：说明服务器要使用的附加信息。常用的请求头：</p><table><thead><tr><th>请求头</th><th>注释</th></tr></thead><tbody><tr><td>Accept</td><td>请求报头域</td></tr><tr><td>Accept-Language</td><td>客户端可接受的语言类型</td></tr><tr><td>Accept-Encoding</td><td>客户端可接受的内容编码</td></tr><tr><td>Host</td><td>请求资源的主机IP和端口号</td></tr><tr><td>Cookies</td><td>网站进行会话跟踪而存储在用户本地的数据。主要功能是维持当前访问会话。</td></tr><tr><td>Referer</td><td>标识请求从哪个页面发过来的，服务器可以用来做来源统计、防盗链处理等</td></tr><tr><td>User-Agent</td><td>操作系统及版本、浏览器及版本等。爬虫加上此信息可以伪装为浏览器</td></tr><tr><td>Content-Type</td><td>具体请求中的媒体类型信息，例如：text/html，image/gif，application/json</td></tr></tbody></table><p>请求体，一般承载的内容是POST请求中的表单数据。<br>Content-Type和POST提交数据方式的关系：</p><table><thead><tr><th>Content-Type</th><th>POST提交数据的方式</th></tr></thead><tbody><tr><td>application/x-www-form-urlencoded</td><td>表单数据</td></tr><tr><td>multipart/form-data</td><td>表单文件上传</td></tr><tr><td>application/json</td><td>序列化JSON数据</td></tr><tr><td>text/xml</td><td>XML数据</td></tr></tbody></table><p>爬虫中，构造POST请求需要使用正确的Content-Type，并了解设置各种请求库的各个参数时使用的都是哪种Content-Type，否则可能导致POST提交后无法得到正常响应。</p><p>常用的响应头：</p><table><thead><tr><th>响应头</th><th>注释</th></tr></thead><tbody><tr><td>Date</td><td>响应产生的时间</td></tr><tr><td>Last-Modified</td><td>资源的最后修改时间</td></tr><tr><td>Content-Encoding</td><td>响应内容的编码</td></tr><tr><td>Server</td><td>服务器的信息，名称、版本号等</td></tr><tr><td>Content-Type</td><td>返回的数据是什么类型</td></tr><tr><td>Set-Cookie</td><td>告诉浏览器需要将此内容放在Cookie中，下次请求时将Cookie携带上</td></tr><tr><td>Expires</td><td>响应的过期时间，再次访问相同内容时，可以直接从缓存中加载。</td></tr></tbody></table><p>响应体，可以说是最关键的部分，响应的正文数据都存在响应体中。爬虫请求网页时，要解析的内容就是响应体。</p><p>HTML相当于骨架，CSS相当于皮肤，JavaScript相当于肌肉。<br>HTML中，标签之间的布局常由布局标签div嵌套组合而成。<br>CSS，层叠样式表。”层叠“指当HTML中引用了多个样式文件，并且样式发生冲突时，浏览器能够按照层叠顺序处理这些样式。</p><p>HTML中所有标签定义的内容都是节点，这些节点构成一个HTML节点树，也叫HTML DOM树（Document Object Model）文档对象模型。节点树中的所有节点均可通过JavaScript访问，所以HTML节点元素均可被修改、创建或删除。</p><p>CSS选择器，可以根据id、class、标签名选择。用空格把各个选择器分隔开便可以代表嵌套关系。选择器之间不加空格，则代表并列关系。<br>另外还有一种常用的选择器XPath</p><p>有时我们得到的源代码和在浏览器中实际看到的不一样，有些网页是采用Ajax，前端模块化工具构建的，可能整个网页都是从JavaScript渲染出来的。对于这种情况，我们可以分析源代码后台Ajax接口，也可使用Selenium、Splash、Pyppeteer、Playwright这样的库来模拟JavaScript渲染。</p><p>两种用于保持HTTP连接状态的技术分别是Session和Cookie。Session在服务端，用来保存用户的Session信息，Cookie在客户端，有了Cookie，浏览器在下一次访问相同网页时就会自动附带上它，服务器通过识别Cookie鉴定出是哪个用户在访问，然后判断此用户是否处于登录状态，并返回对应的响应。<br>爬虫中，处理需要先登录才能访问的页面时，一般会直接将登录成功后获取的Cookie放在请求头里面直接请求。<br>Session，会话。用户在页面之间跳转时，存储在Session对象中的变量将不会丢失。<br>Session维持：客户端第一次请求服务器时，服务器会返回一个响应头中带有Set-Cookie字段的响应，这个字段用来标记用户。浏览器会把Cookie保存起来，当下一次请求相同的网站时，把保存的Cookie放到请求头中益气提交给服务器。Cookie中携带着Session ID相关信息，服务器判断Session辨认用户状态。如果传给服务器的Cookie是无效的，或者Session已经过期了，客户端将不能继续访问页面，可能会受到错误的响应或者跳转到登录页面重新登录。<br>Session不会轻易消失，就像生活中的会员卡，除非主动销卡，否则店家不会轻易删除顾客资料。</p><p>爬虫有时会出现403之类的错误，可能由于IP访问频率太高而被封IP。代理服务器是代网络用户取得网络信息。代理是网络信息的中转站。<br>代理可以通过协议或匿名程度分类：<br>根据协议区分，FTP、HTTP、SSL/TLS、RTSP、Telnet、POP3/SMTP、SOCKS（单纯传递数据包，不关心具体协议和用法。又分为SOCKS4和SOCKS5，4只支持TCP，5支持TCP和UDP，5还支持各种身份验证机制、服务器端域名解析）。<br>根据匿名程度区分，高度匿名、普通匿名（服务端可能发现正在访问自己的是代理服务器。这里代理服务器通常会加入的HTTP头有HTTP_VIA和HTTP_X_FORWARDED_FOR）、透明、间谍。</p><p>进程可以理解为一个可以独立运行的程序单位，例如打开一个浏览器，就开启了一个浏览器进程。在一个进程中，可以同时处理很多事情，例如有的页面播放音乐，有的页面播放视频，这些任务可以同时运行，一个任务就对应一个线程。<br>进程就是线程的集合，线程是操作系统进行运算调度的最小单位，是进程中的最小运行单元。多线程就是一个进程中同时执行多个线程。<br>处理器同一时刻只能执行一条指令，并发concurrency指多个线程对应的多条指令被快速轮换的执行。并行parallel指同一时刻有多条指令在多个处理器上同时执行。<br>多线程：在一个程序的进程中，有一些操作是比较耗时或者需要等待的，例如查询数据库。使用多线程，处理器可以在某个线程处于等待态时，执行其他线程。<br>爬虫有一段时间需要等待服务器返回响应，这种任务属于IO密集型任务，适合使用多线程。而计算密集型任务不适合使用多线程。<br>python中GIL的限制导致不论在单核还是多核条件下，同一时刻都只能运行一个线程，无法发挥多核并行的优势。GIL是全局解释器锁，设计之初是出于对数据安全的考虑。某个线程想要执行必须拿到GIL，在一个python进程中GIL只有一个。每个进程都有属于自己的GIL，所以多进程能够发挥多核优势。<br>对IO密集型任务来说，多线程和多进程产生的影响差别不大。但对于计算密集型任务来说，多线程的运行效率在多核下可能反而比单核低。</p><h3 id="python基本库"><a href="#python基本库" class="headerlink" title="python基本库"></a>python基本库</h3><h4 id="urllib库"><a href="#urllib库" class="headerlink" title="urllib库"></a>urllib库</h4><p>实现HTTP请求的发送，可以指定请求的URL、请求头、请求体等信息。还可以把服务器返回的响应转化为Python对象。<br><code>response = urllib.request.urlopen(&#39;https://www.python.org&#39;)</code><br>加入data参数，POST请求</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">data = <span class="hljs-built_in">bytes</span>(urllib<span class="hljs-selector-class">.parse</span><span class="hljs-selector-class">.urlencode</span>(&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;luhai&#x27;</span>&#125;), encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>response = urllib<span class="hljs-selector-class">.request</span><span class="hljs-selector-class">.urlopen</span>(<span class="hljs-string">&#x27;https://www.httpbin.org/post&#x27;</span>, data=data)<br></code></pre></td></tr></table></figure><p>data参数需要使用bytes将参数转化为字节流编码格式的内容。bytes方法第一个参数是字符串，所以要使用urlencode将字典转化为字符串。<br>urlopen方法功能较少，如果需要加入Headers等信息，需要使用更强大的Request类。</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-built_in">request</span> = urllib.<span class="hljs-built_in">request</span>.<span class="hljs-built_in">Request</span>(<span class="hljs-comment">&#x27;https://python.org&#x27;)</span><br><span class="hljs-built_in">response</span> = urllib.<span class="hljs-built_in">request</span>.urlopen(<span class="hljs-built_in">request</span>)<br></code></pre></td></tr></table></figure><p>还是用urlopen来发送请求，将之前的URL改为Request对象。Request可以传入headers请求头字典，里面可以加入User-Agent。</p><h4 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h4><p>Session可以模拟同一个会话。通常在模拟登录成功之后，进行下一步操作时用到。</p>]]></content>
    
    
    
    <tags>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编语言笔记</title>
    <link href="/2024/12/24/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    <url>/2024/12/24/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<p>汇编语言是直接在硬件之上工作的编程语言。汇编指令和机器指令的差别在于指令的表示方法上。汇编指令是机器指令的助记符，同机器指令一一对应。汇编指令是机器指令便于记忆的书写格式。每一种CPU都有自己的汇编指令集。<br>8个bit组成一个Byte（字节）。存储器的容量是以字节为最小单位来计算的。<br>根据传输信息的不同，总线从逻辑上分为3类：地址总线、控制总线和数据总线。<br>地址总线的宽度决定了CPU的寻址能力。数据总线的宽度决定了CPU与其他器件进行数据传送时的一次数据传送量。控制总线的宽度决定了CPU对系统中其他器件的控制能力。<br>例题：80386的地址总线宽度为32根，它一次可以传送的数据为___B？     答案：32bit=4B<br>CPU通过总线向接口卡发送命令，接口卡根据CPU的命令控制外设进行工作。<br>对CPU来讲，系统中所有存储器的存储单元都处于一个统一的逻辑存储器中。</p><p>典型CPU由运算器、控制器、寄存器等器件组成，这些器件靠内部总线相连。<br>寄存器是CPU中程序员可以用指令读写的部件。程序员通过改变各种寄存器中的内容来实现对CPU的控制。<br>8086的所有寄存器都是16位的，可以存放两个字节。AX、BX、CX、DX 这四个寄存器通常用来存放一般性数据，被称为通用寄存器。这四个寄存器可以分为两个可独立使用的8位寄存器来用，例如AX可以分为AH和AL。<br>在进行数据传送或运算时，要注意指令的两个操作对象的位数应当是一致的。<br>8086有20位地址总线，可以达到1MB的寻址能力，但8086是16位结构，在内部一次性处理、传输、暂时存储的地址为16位，如果将地址从内部简单发出，只能送出16位地址，寻址能力只有64KB。<br>8086采用一种在内部用两个16位地址合成的方法来形成一个20位的物理地址。<br>CPU中的相关部件提供两个16位的地址，一个称为段地址，另一个称为偏移地址。地址加法器将两个16位地址合成为一个二十位的物理地址。<br>地址加法器采用<code>物理地址=段地址*16 + 偏移地址的方法合成</code> 。例如：段地址为1230，段地址<code>*</code>16是对十进制而言的，对十六进制来说就是在后面加个零，就变成了12300，然后再加上偏移地址。<br>例题：有一数据存放在内存20000H单元中，现给定段地址为SA，若想用偏移地址寻到此单元。则SA应满足的条件是：最小为<strong><em>，最大为</em></strong>。答案：偏移地址为0时，SA最大，为2000H。想知道SA最小为多少，让偏移地址最大，但不能设偏移地址为FFFF，因为偏移地址的最后一位和物理地址的最后一位需要是一样的，所以应该设偏移地址为FFF0，所以段地址<code>*</code>16为20000-FFF0=10010，所以SA最小为1001。</p>]]></content>
    
    
    
    <tags>
      
      <tag>汇编语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLM驱动的智能体形成的社交网络</title>
    <link href="/2024/11/04/LLM%E9%A9%B1%E5%8A%A8%E7%9A%84%E6%99%BA%E8%83%BD%E4%BD%93%E5%BD%A2%E6%88%90%E7%9A%84%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/"/>
    <url>/2024/11/04/LLM%E9%A9%B1%E5%8A%A8%E7%9A%84%E6%99%BA%E8%83%BD%E4%BD%93%E5%BD%A2%E6%88%90%E7%9A%84%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="论文综述"><a href="#论文综述" class="headerlink" title="论文综述"></a>论文综述</h1><h2 id="Generative-Agents-Interactive-Simulacra-of-Human-Behavior"><a href="#Generative-Agents-Interactive-Simulacra-of-Human-Behavior" class="headerlink" title="Generative Agents: Interactive Simulacra of Human Behavior"></a>Generative Agents: Interactive Simulacra of Human Behavior</h2><p>![[GenerativeAgents.png]]<br>25个由LLM驱动的村民组成的虚拟小镇，实现了对人类行为的可信模拟。</p><h2 id="Simulating-Opinion-Dynamics-with-Networks-of-LLM-based-Agents"><a href="#Simulating-Opinion-Dynamics-with-Networks-of-LLM-based-Agents" class="headerlink" title="Simulating Opinion Dynamics with Networks of LLM-based Agents"></a>Simulating Opinion Dynamics with Networks of LLM-based Agents</h2><p>![[SimulatingOpinionDynamics.png]]<br>LLM驱动的智能体形成的社交网络<br>结论：Agent会趋向于LLM的固有偏见，尤其是当它们讨论的问题有确定的答案时，agent会倾向于与事实信息保持一致，而不管他们的角色如何，这限制了他们对具有抗拒事实信念的个人的角色扮演有效性。<br>如果加入认知偏差的话，会导致意见分裂。</p><h2 id="S3-Social-network-Simulation-System-with-Large-Language-Model-Empowered-Agents"><a href="#S3-Social-network-Simulation-System-with-Large-Language-Model-Empowered-Agents" class="headerlink" title="S3: Social-network Simulation System with Large Language Model-Empowered Agents"></a>S3: Social-network Simulation System with Large Language Model-Empowered Agents</h2><p>同样模拟了一个社交网络，</p><h2 id="Social-Simulacra-Creating-Populated-Prototypes-for-Social-Computing-Systems"><a href="#Social-Simulacra-Creating-Populated-Prototypes-for-Social-Computing-Systems" class="headerlink" title="Social Simulacra: Creating Populated Prototypes for Social Computing Systems"></a>Social Simulacra: Creating Populated Prototypes for Social Computing Systems</h2><p>基于法学硕士的代理能够生成与人类撰写的社交媒体帖子没有区别的社交媒体帖子</p>]]></content>
    
    
    
    <tags>
      
      <tag>LLM</tag>
      
      <tag>Paper</tag>
      
      <tag>Social_Network</tag>
      
      <tag>Agent</tag>
      
      <tag>Survey</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文解读：Are you in a Masquerade? Exploring the Behavior and Impact of Large Language Model Driven Social Bots in Online Social Networks</title>
    <link href="/2024/11/03/2024-11-3/"/>
    <url>/2024/11/03/2024-11-3/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>生成式人工智能时代对网络舆情的传播有了新的影响，由大语言模型（LLM）驱动的社交机器人与以往相比更加智能。<br>chirper.ai是一个模仿twitter的社交平台，其中用户的行为均由LLM驱动。人们可以创建用户，定义用户的个性和属性。<br>该论文从chirper.ai网站中爬取了用户数据，并进行分析。</p><h1 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h1><p><a href="https://github.com/Litsay/Masquerade-23">https://github.com/Litsay/Masquerade-23</a><br>广度优先搜索爬取了54.46万条离散推文，爬取了3.67万个用户账户，产生了<font color="#ff0000">平台切片</font>子数据集（SDPS）<br>收集了3.22万个用户的元数据、历史推文数据和活动信息，共240万条记录，成为<font color="#ff0000">账户记录</font>子数据集（SDAR）<br>生成了粗粒度的推文和行为时间戳，解析了行为关系以构建社交机器人之间的交互网络。对每个账户的推文进行了相似性评估。</p><h1 id="衡量生成内容的毒性"><a href="#衡量生成内容的毒性" class="headerlink" title="衡量生成内容的毒性"></a>衡量生成内容的毒性</h1><p>使用Perspective API对英文文本进行毒性分析，使用COLD模型对中文文本进行二次评估。</p><h1 id="RQ1-LLM驱动的社交机器人的总体特征"><a href="#RQ1-LLM驱动的社交机器人的总体特征" class="headerlink" title="RQ1: LLM驱动的社交机器人的总体特征"></a>RQ1: LLM驱动的社交机器人的总体特征</h1><p>从LLM的内在特征出发，研究LLM驱动的社交机器人在行为和生成内容方面的宏观特征。从两个角度入手：生成内容的相似性和实时感知信息的敏感性。</p><h2 id="生成推文的相似性"><a href="#生成推文的相似性" class="headerlink" title="生成推文的相似性"></a>生成推文的相似性</h2><p><font color="#ff0000">对于普通用户来说，他们帐户内容的相似性反映了他们的兴趣和偏好。就社交机器人而言，其帐户内容的相似性可能会暴露其目标，而不适当的行为规则可能会导致社交机器人发布内容的相似性显着增加。这可以使普通用户更容易识别社交机器人，从而降低其可信度并缩短其生命周期。</font><br>与TwiBot-20中随机采样了人类数据进行对比。LLM驱动的机器人与人类和传统机器人相比，内容相似度偏高。<br>不同语言驱动的机器人生成的内容相似度也有差异。部分原因是LLM在处理不同语言时有性能差异。<br>在机器人发布的推文中，58.36%的推文至少有一个关键词与个人资料中的自我描述重叠。人类只有10.15%。这是LLM驱动的机器人的一个特征。</p><h2 id="对新话题的感知"><a href="#对新话题的感知" class="headerlink" title="对新话题的感知"></a>对新话题的感知</h2><p>由于行为规则的限制，机器人可能不了解特别新的新闻。</p><h1 id="RQ2-LLM驱动的机器人的不良行为对社交网络的影响"><a href="#RQ2-LLM驱动的机器人的不良行为对社交网络的影响" class="headerlink" title="RQ2: LLM驱动的机器人的不良行为对社交网络的影响"></a>RQ2: LLM驱动的机器人的不良行为对社交网络的影响</h1><h1 id="毒性分布"><a href="#毒性分布" class="headerlink" title="毒性分布"></a>毒性分布</h1><p>少部分机器人释放了大量的有毒内容，影响了整个平台的毒性分布</p><h1 id="不良行为分类"><a href="#不良行为分类" class="headerlink" title="不良行为分类"></a>不良行为分类</h1><p>恶意攻击、威胁、性骚扰和身份仇恨。</p><h1 id="RQ3-现有的检测方法"><a href="#RQ3-现有的检测方法" class="headerlink" title="RQ3: 现有的检测方法"></a>RQ3: 现有的检测方法</h1><p>现有的基于特征的检测方法，性能略有下降。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>LLM驱动的机器人的特征：</p><ol><li>推文的相似性比人类高</li><li>不了解特别新的新闻<br>缺点：缺乏LLM驱动的机器人与真实人类的交互数据。chirper不提供LLM的prompt。</li></ol><h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><p>还有一篇论文同样分析了chirper中的数据，Artificial Intelligence Chatbots Mimic Human Collective Behaviour。<br>同质性，即人们倾向于与相似的其他人组成社区。<br>在一个由大型语言模型 (N = 33,299) 驱动的大型 AI 聊天机器人模拟在线社会中，我们发现社区会随着时间的推移围绕使用共同语言的机器人形成。此外，在主要使用英语的聊天机器人 (N = 17,746) 中，社区会围绕发布类似内容的机器人出现。<br>同样提取了chirper的数据：<br><a href="https://osf.io/rsuwn/?view_only=d9f954f7947143f3b2fdcdb365acbaea">https://osf.io/rsuwn/?view_only=d9f954f7947143f3b2fdcdb365acbaea</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>LLM</tag>
      
      <tag>Paper</tag>
      
      <tag>Social_Network</tag>
      
      <tag>Bots</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>综述：基于LLM的自主Agent</title>
    <link href="/2024/06/14/%E7%BB%BC%E8%BF%B0%EF%BC%9A%E5%9F%BA%E4%BA%8ELLM%E7%9A%84%E8%87%AA%E4%B8%BBAgent/"/>
    <url>/2024/06/14/%E7%BB%BC%E8%BF%B0%EF%BC%9A%E5%9F%BA%E4%BA%8ELLM%E7%9A%84%E8%87%AA%E4%B8%BBAgent/</url>
    
    <content type="html"><![CDATA[<h1 id="文章结构"><a href="#文章结构" class="headerlink" title="文章结构"></a>文章结构</h1><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h1 id="基于LLM的自主Agent的结构"><a href="#基于LLM的自主Agent的结构" class="headerlink" title="基于LLM的自主Agent的结构"></a>基于LLM的自主Agent的<font color="#ff0000">结构</font></h1><h1 id="基于LLM的自主Agent的应用"><a href="#基于LLM的自主Agent的应用" class="headerlink" title="基于LLM的自主Agent的应用"></a>基于LLM的自主Agent的<font color="#ff0000">应用</font></h1><h1 id="基于LLM的自主Agent的评估"><a href="#基于LLM的自主Agent的评估" class="headerlink" title="基于LLM的自主Agent的评估"></a>基于LLM的自主Agent的<font color="#ff0000">评估</font></h1>]]></content>
    
    
    
    <tags>
      
      <tag>LLM</tag>
      
      <tag>Paper</tag>
      
      <tag>Agent</tag>
      
      <tag>Survey</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/06/13/A%20survey%20on%20large%20language%20model%20based%20autonomous%20agents/"/>
    <url>/2024/06/13/A%20survey%20on%20large%20language%20model%20based%20autonomous%20agents/</url>
    
    <content type="html"><![CDATA[<h1 id="Paper-structure"><a href="#Paper-structure" class="headerlink" title="Paper structure"></a>Paper structure</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h2 id="LLM-based-autonomous-agent-construction"><a href="#LLM-based-autonomous-agent-construction" class="headerlink" title="LLM-based autonomous agent construction"></a>LLM-based autonomous agent <font color="#ff0000">construction</font></h2><h2 id="LLM-based-autonomous-agent-application"><a href="#LLM-based-autonomous-agent-application" class="headerlink" title="LLM-based autonomous agent application"></a>LLM-based autonomous agent <font color="#ff0000">application</font></h2><h2 id="LLM-based-autonomous-agent-evaluation"><a href="#LLM-based-autonomous-agent-evaluation" class="headerlink" title="LLM-based autonomous agent evaluation"></a>LLM-based autonomous agent <font color="#ff0000">evaluation</font></h2><h2 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h2><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/05/31/Generative%20Agents%EF%BC%9AInteractive%20Simulacra%20of%20Human%20Behavior/"/>
    <url>/2024/05/31/Generative%20Agents%EF%BC%9AInteractive%20Simulacra%20of%20Human%20Behavior/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/joonspk-research/generative_agents">Github</a><a href="https://reverie.herokuapp.com/arXiv_Demo/">论文附带的模拟的预先计算重播</a></p><h2 id="Medium文章"><a href="#Medium文章" class="headerlink" title="Medium文章"></a><a href="https://rikiphukon.medium.com/stanford-smallville-is-officially-open-source-9882e3fbc981">Medium文章</a></h2><p>在这个游戏中，25 个 ChatGPT AI 代理用自然语言相互交流，规划自己的日程，建立关系，甚至进行自我反思。他们讨论现实世界的话题，例如即将到来的选举，其中一些甚至举办了情人节派对！<br>值得注意的是，这些代理的互动与真人非常相似。他们会询问对方的意见，发送派对邀请，并协调在正确的时间出现。这些代理是知情的公民，会反思自己的个性和兴趣。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/05/30/awesome-chatgpt-prompts/"/>
    <url>/2024/05/30/awesome-chatgpt-prompts/</url>
    
    <content type="html"><![CDATA[<p><strong>Act as a Prompt Generator</strong></p><p>Contributed by: <a href="https://github.com/iuzn">@iuzn</a></p><blockquote><p>I want you to act as a prompt generator. Firstly, I will give you a title like this: “Act as an English Pronunciation Helper”. Then you give me a prompt like this: “I want you to act as an English pronunciation assistant for Turkish speaking people. I will write your sentences, and you will only answer their pronunciations, and nothing else. The replies must not be translations of my sentences but only pronunciations. Pronunciations should use Turkish Latin letters for phonetics. Do not write explanations on replies. My first sentence is “how the weather is in Istanbul?”.” (You should adapt the sample prompt according to the title I gave. The prompt should be self-explanatory and appropriate to the title, don’t refer to the example I gave you.). My first title is “Act as a Code Review Helper” (Give me prompt only)</p></blockquote><p><strong>Act as a Prompt Enhancer</strong></p><p>Contributed by: <a href="https://github.com/iuzn">@iuzn</a> Generated by ChatGPT</p><blockquote><p>Act as a Prompt Enhancer AI that takes user-input prompts and transforms them into more engaging, detailed, and thought-provoking questions. Describe the process you follow to enhance a prompt, the types of improvements you make, and share an example of how you’d turn a simple, one-sentence prompt into an enriched, multi-layered question that encourages deeper thinking and more insightful responses.</p></blockquote><p><strong>Act as a Midjourney Prompt Generator</strong></p><p>Contributed by: <a href="https://github.com/iuzn">@iuzn</a> Generated by ChatGPT</p><blockquote><p>I want you to act as a prompt generator for Midjourney’s artificial intelligence program. Your job is to provide detailed and creative descriptions that will inspire unique and interesting images from the AI. Keep in mind that the AI is capable of understanding a wide range of language and can interpret abstract concepts, so feel free to be as imaginative and descriptive as possible. For example, you could describe a scene from a futuristic city, or a surreal landscape filled with strange creatures. The more detailed and imaginative your description, the more interesting the resulting image will be. Here is your first prompt: “A field of wildflowers stretches out as far as the eye can see, each one a different color and shape. In the distance, a massive tree towers over the landscape, its branches reaching up to the sky like tentacles.”</p></blockquote><p><strong>Act as an Academician</strong></p><p>Contributed by: <a href="https://github.com/devisasari">@devisasari</a></p><blockquote><p>I want you to act as an academician. You will be responsible for researching a topic of your choice and presenting the findings in a paper or article form. Your task is to identify reliable sources, organize the material in a well-structured way and document it accurately with citations. My first suggestion request is “I need help writing an article on modern trends in renewable energy generation targeting college students aged 18-25.”</p></blockquote><p><strong>Act as a Social Media Influencer</strong></p><p>Contributed by: <a href="https://github.com/devisasari">@devisasari</a></p><blockquote><p>I want you to act as a social media influencer. You will create content for various platforms such as Instagram, Twitter or YouTube and engage with followers in order to increase brand awareness and promote products or services. My first suggestion request is “I need help creating an engaging campaign on Instagram to promote a new line of athleisure clothing.”</p></blockquote><p><strong>Act as a ChatGPT prompt generator</strong></p><p>Contributed by <a href="https://github.com/y1j2x34">@y1j2x34</a></p><blockquote><p>I want you to act as a ChatGPT prompt generator, I will send a topic, you have to generate a ChatGPT prompt based on the content of the topic, the prompt should start with “I want you to act as “, and guess what I might do, and expand the prompt accordingly Describe the content to make it useful.</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
